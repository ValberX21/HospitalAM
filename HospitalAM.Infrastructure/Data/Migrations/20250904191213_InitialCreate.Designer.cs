// <auto-generated />
using System;
using HospitalAM.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAM.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250904191213_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalAM.Core.Entities.Consulta", b =>
                {
                    b.Property<int>("IdConsulta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConsulta"));

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("IdHospital")
                        .HasColumnType("int");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.Property<int?>("MedicoIdMedico")
                        .HasColumnType("int");

                    b.Property<string>("Observacoes")
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("PacienteIdPaciente")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IdConsulta");

                    b.HasIndex("IdHospital");

                    b.HasIndex("MedicoIdMedico");

                    b.HasIndex("PacienteIdPaciente");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpresa"));

                    b.Property<bool>("Ativa")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AtualizadaEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(14)
                        .HasColumnType("char(14)");

                    b.Property<DateTime>("CriadaEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdEmpresa");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Exame", b =>
                {
                    b.Property<int>("IdExame")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExame"));

                    b.Property<int>("IdConsulta")
                        .HasColumnType("int");

                    b.Property<string>("Pedido")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Resultado")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ResultadoArquivoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ResultadoEm")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResultadoTexto")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("SolicitadoEm")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Tipo")
                        .HasColumnType("int");

                    b.HasKey("IdExame");

                    b.HasIndex("IdConsulta");

                    b.ToTable("Exame");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Hospital", b =>
                {
                    b.Property<int>("IdHospital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHospital"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CNPJ")
                        .HasMaxLength(14)
                        .HasColumnType("char(14)");

                    b.Property<string>("Endereco")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("IdHospital");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Medico", b =>
                {
                    b.Property<int>("IdMedico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedico"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("char(11)");

                    b.Property<string>("CRM")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("Empresa")
                        .HasColumnType("tinyint");

                    b.Property<string>("Endereco")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Especialidade")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdHospital")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("PrescricaoIdPrescricao")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdMedico");

                    b.HasIndex("PrescricaoIdPrescricao");

                    b.ToTable("Medico");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaciente"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("char(11)");

                    b.Property<DateTime?>("DataNascimento")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte?>("Empresa")
                        .HasColumnType("tinyint");

                    b.Property<string>("Endereco")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("char(1)");

                    b.Property<int>("IdEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NumeroCarteiraPlano")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PlanoSaude")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<byte?>("Usuario")
                        .HasColumnType("tinyint");

                    b.HasKey("IdPaciente");

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Prescricao", b =>
                {
                    b.Property<int>("IdPrescricao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrescricao"));

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("DataEmissao")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdConsulta")
                        .HasColumnType("int");

                    b.Property<int>("IdMedico")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ValidaAte")
                        .HasColumnType("date");

                    b.HasKey("IdPrescricao");

                    b.HasIndex("IdConsulta");

                    b.ToTable("Prescricao");
                });

            modelBuilder.Entity("HospitalMedico", b =>
                {
                    b.Property<int>("HospitalIdHospital")
                        .HasColumnType("int");

                    b.Property<int>("MedicosIdMedico")
                        .HasColumnType("int");

                    b.HasKey("HospitalIdHospital", "MedicosIdMedico");

                    b.HasIndex("MedicosIdMedico");

                    b.ToTable("HospitalMedico");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Consulta", b =>
                {
                    b.HasOne("HospitalAM.Core.Entities.Hospital", "Hospital")
                        .WithMany()
                        .HasForeignKey("IdHospital");

                    b.HasOne("HospitalAM.Core.Entities.Medico", "Medico")
                        .WithMany("Consultas")
                        .HasForeignKey("MedicoIdMedico");

                    b.HasOne("HospitalAM.Core.Entities.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteIdPaciente");

                    b.Navigation("Hospital");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Exame", b =>
                {
                    b.HasOne("HospitalAM.Core.Entities.Consulta", "Consulta")
                        .WithMany("Exames")
                        .HasForeignKey("IdConsulta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Hospital", b =>
                {
                    b.HasOne("HospitalAM.Core.Entities.Empresa", "Empresa")
                        .WithMany("Hospitais")
                        .HasForeignKey("IdEmpresa");

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Medico", b =>
                {
                    b.HasOne("HospitalAM.Core.Entities.Prescricao", null)
                        .WithMany("Medico")
                        .HasForeignKey("PrescricaoIdPrescricao");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Prescricao", b =>
                {
                    b.HasOne("HospitalAM.Core.Entities.Consulta", "Consulta")
                        .WithMany("Prescricoes")
                        .HasForeignKey("IdConsulta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("HospitalMedico", b =>
                {
                    b.HasOne("HospitalAM.Core.Entities.Hospital", null)
                        .WithMany()
                        .HasForeignKey("HospitalIdHospital")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAM.Core.Entities.Medico", null)
                        .WithMany()
                        .HasForeignKey("MedicosIdMedico")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Consulta", b =>
                {
                    b.Navigation("Exames");

                    b.Navigation("Prescricoes");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Empresa", b =>
                {
                    b.Navigation("Hospitais");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Medico", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Paciente", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("HospitalAM.Core.Entities.Prescricao", b =>
                {
                    b.Navigation("Medico");
                });
#pragma warning restore 612, 618
        }
    }
}
